version: "3.9"

services:
  # basic Flink services
  jobmanager:
    image: flink:1.20.0-scala_2.12-java17
    container_name: jobmanager
    hostname: jobmanager
    ports:
      - "8081:8081" # Flink Web UI
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager

  taskmanager:
    image: flink:1.20.0-scala_2.12-java17
    container_name: taskmanager
    hostname: taskmanager
    depends_on:
      - jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 10

  # this is to automatically submit Java and SQL Flink jobs
  java-job-submitter:
    image: flink:1.20.0-scala_2.12-java17
    container_name: java-job-submitter
    depends_on:
      - jobmanager
      - taskmanager
      - create-kafka-topics
    volumes:
      - ./flink-java-jobs/build/libs:/jars
    entrypoint: >
      /bin/sh -c "
      sleep 10 &&
      flink run -m jobmanager:8081 /jars/facerec2-1.0-SNAPSHOT-all.jar
      "

  # launch the emotion recognition producer + Streamlit UI
  emotion-rec:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: emotion
    depends_on:
      - jobmanager
      - taskmanager
    volumes:
      - ./recognition:/app
      - ./configs/camera_feed.properties:/app/src/camera_feed.properties
      - /tmp/.X11-unix:/tmp/.X11-unix   # X11 socket for GUI (Linux only)
    working_dir: /app
    # Streamlit serves the UI; bind to 0.0.0.0 so host can reach it
    command: >
      streamlit run src/emotion.py --server.port=8501 --server.address=0.0.0.0
    stdin_open: true
    tty: true
    devices:
      - "/dev/video0:/dev/video0"   # camera (Linux) — remove on Windows/macOS
    environment:
      - DISPLAY=${DISPLAY}           # forward X11 for GUI (Linux)
      - PYTHONUNBUFFERED=1
    ports:
      - "8501:8501"                  # Streamlit UI
    restart: unless-stopped


  # standalone mode: do not produce to Kafka and do not launch analytics
  standalone:
    profiles: ["standalone"]
    build:
      context: .
      dockerfile: Dockerfile
    container_name: standalone-emotion
    volumes:
      - ./recognition:/app
      - /tmp/.X11-unix:/tmp/.X11-unix   # X11 socket for GUI (Linux only)
    working_dir: /app
    # Streamlit serves the UI; bind to 0.0.0.0 so host can reach it
    command: >
      streamlit run src/emotion.py --server.port=8501 --server.address=0.0.0.0 --browser.gatherUsageStats=false -- no-produce
    stdin_open: true
    tty: true
    devices:
      - "/dev/video0:/dev/video0"   # camera (Linux) — remove on Windows/macOS
    environment:
      - DISPLAY=${DISPLAY}           # forward X11 for GUI (Linux)
      - PYTHONUNBUFFERED=1

    ports:
      - "8501:8501"                  # Streamlit UI
    restart: unless-stopped


  # create 2 kafka topics
    # zookeeper + kafka (dev, single-node)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 12

  create-kafka-topics:
    image: confluentinc/cp-kafka:7.4.1
    container_name: create-kafka-topics
    depends_on:
      - kafka
    restart: "no"
    command: >
      /bin/sh -c "
      until kafka-topics --bootstrap-server kafka:9092 --list >/dev/null 2>&1; do sleep 1; done;
      kafka-topics --bootstrap-server kafka:9092 --create --topic rt.emotions-recorded.v1 --partitions 1 --replication-factor 1 || true;
      kafka-topics --bootstrap-server kafka:9092 --create --topic rt.emotions-unique.v1 --partitions 1 --replication-factor 1 || true;
      kafka-topics --bootstrap-server kafka:9092 --create --topic emotions-counts --partitions 1 --replication-factor 1 || true;
      echo Topics created;
      "

  flink-sql-job:
    image: flink:1.20.0-scala_2.12-java17
    container_name: flink-sql-job
    profiles: ["sql-dashboard"]
    volumes:
      - ./flink-sql-jobs:/flink-sql-jobs:ro   # keep :ro if you want read-only
    entrypoint: >
      /bin/sh -c "sleep 10 && /opt/flink/bin/sql-client.sh embedded -f /flink-sql-jobs/unique_emotions_count.sql"
    restart: "no"
